// Generated by CoffeeScript 1.7.1
(function() {
  var Ratestate, debug, fs, hash, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = require("util");

  fs = require("fs");

  hash = require("object-hash");

  debug = require("debug")("Ratestate:Ratestate");

  Ratestate = (function() {
    function Ratestate(config) {
      var key, val;
      this._desiredStates = {};
      this._currentHashes = {};
      this._desiredHashes = {};
      this._entityStateCallbacks = {};
      this._workerInProgress = {};
      this._entityIds = [];
      this._pointer = 0;
      this._config = {
        interval: 30,
        hashFunc: hash,
        worker: function(entityId, state, cb) {
          return cb(null);
        },
        drained: function() {}
      };
      if (config != null) {
        for (key in config) {
          val = config[key];
          this._config[key] = val;
        }
      }
    }

    Ratestate.prototype.finalState = function(entityId, desiredState, cb) {
      if (!cb) {
        throw new Error("Callback required");
      }
      return this.setState(entityId, desiredState, (function(_this) {
        return function(err) {
          _this.removeEntity(entityId);
          return cb(err);
        };
      })(this));
    };

    Ratestate.prototype.removeEntity = function(entityId) {
      var id, idx, _i, _len, _ref;
      _ref = this._entityIds;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        id = _ref[idx];
        if (id === entityId) {
          this._entityIds.splice(idx, 1);
          break;
        }
      }
      delete this._desiredStates[entityId];
      delete this._desiredHashes[entityId];
      delete this._currentHashes[entityId];
      delete this._entityStateCallbacks[entityId];
      return delete this._workerInProgress[entityId];
    };

    Ratestate.prototype.setState = function(entityId, desiredState, cb) {
      var desiredHash;
      desiredHash = this._config.hashFunc(desiredState);
      if ((this._currentHashes[entityId] != null) && this._currentHashes[entityId] === desiredHash) {
        if (cb != null) {
          cb(null);
        }
        return;
      }
      if (__indexOf.call(this._entityIds, entityId) < 0) {
        this._entityIds.push(entityId);
        this._entityStateCallbacks[entityId] = [];
      }
      if (cb != null) {
        this._entityStateCallbacks[entityId].push(cb);
      }
      this._desiredHashes[entityId] = desiredHash;
      return this._desiredStates[entityId] = desiredState;
    };

    Ratestate.prototype.run = function() {
      var cbs, checked, desiredHash, desiredState, entityId, i, _i, _ref, _ref1;
      checked = 0;
      for (i = _i = _ref = this._pointer, _ref1 = this._entityIds.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        entityId = this._entityIds[i];
        desiredState = this._desiredStates[entityId];
        desiredHash = this._desiredHashes[entityId];
        cbs = this._entityStateCallbacks[entityId];
        this._entityStateCallbacks[entityId] = [];
        checked++;
        this._pointer++;
        if (this._pointer >= this._entityIds.length) {
          this._pointer = 0;
        }
        if (this._currentHashes[entityId] !== this._desiredHashes[entityId]) {
          if (this._workerInProgress[entityId] === true) {
            continue;
          }
          this._workerInProgress[entityId] = true;
          this._config.worker(entityId, desiredState, (function(_this) {
            return function(err) {
              var cb, _j, _len, _results;
              _this._workerInProgress[entityId] = false;
              if (!err) {
                _this._currentHashes[entityId] = desiredHash;
              }
              if (cbs != null) {
                _results = [];
                for (_j = 0, _len = cbs.length; _j < _len; _j++) {
                  cb = cbs[_j];
                  _results.push(cb(err));
                }
                return _results;
              }
            };
          })(this));
          return;
        }
        if (checked === this._entityIds.length && this._entityIds.length > 0) {
          if (this._config.drained != null) {
            this._config.drained();
          }
        }
      }
    };

    Ratestate.prototype.start = function() {
      return this.timer = setInterval(this.run.bind(this), this._config.interval);
    };

    Ratestate.prototype.stop = function() {
      return clearInterval(this.timer);
    };

    return Ratestate;

  })();

  module.exports = Ratestate;

}).call(this);

//# sourceMappingURL=Ratestate.map
