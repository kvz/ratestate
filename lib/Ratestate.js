// Generated by CoffeeScript 1.7.1
(function() {
  var Ratestate, debug, fs, hash, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = require("util");

  fs = require("fs");

  hash = require("object-hash");

  debug = require("debug")("Ratestate:Ratestate");

  Ratestate = (function() {
    function Ratestate(config) {
      var key, val;
      this._desiredStates = {};
      this._currentHashes = {};
      this._desiredHashes = {};
      this._objectIds = [];
      this._pointer = 0;
      this._config = {
        interval: 30,
        hashFunc: hash,
        worker: function(objectId, state, cb) {
          console.log("Processing " + objectId);
          return cb(null);
        }
      };
      if (config != null) {
        for (key in config) {
          val = config[key];
          this._config[key] = val;
        }
      }
    }

    Ratestate.prototype.setState = function(objectId, desiredState) {
      var desiredHash;
      desiredHash = this._config.hashFunc(desiredState);
      if ((this._currentHashes[objectId] != null) && this._currentHashes[objectId] === desiredHash) {
        return;
      }
      if (__indexOf.call(this._objectIds, objectId) < 0) {
        this._objectIds.push(objectId);
      }
      this._desiredHashes[objectId] = desiredHash;
      return this._desiredStates[objectId] = desiredState;
    };

    Ratestate.prototype.run = function() {
      var desiredState, i, len, objectId, _i, _results;
      len = this._objectIds.length - 1;
      _results = [];
      for (i = _i = 0; 0 <= len ? _i <= len : _i >= len; i = 0 <= len ? ++_i : --_i) {
        if (!(i >= this._pointer)) {
          continue;
        }
        objectId = this._objectIds[i];
        desiredState = this._desiredStates[objectId];
        this._pointer++;
        if (this._pointer > len) {
          this._pointer = 0;
        }
        if (this._currentHashes[objectId] !== this._desiredHashes[objectId]) {
          this._config.worker(objectId, desiredState, (function(_this) {
            return function(err) {
              if (!err) {
                return _this._currentHashes[objectId] = _this._desiredHashes[objectId];
              }
            };
          })(this));
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Ratestate.prototype.start = function() {
      return this.timer = setInterval(this.run.bind(this), this._config.interval);
    };

    Ratestate.prototype.stop = function() {
      return clearInterval(this.timer);
    };

    return Ratestate;

  })();

  module.exports = Ratestate;

}).call(this);

//# sourceMappingURL=Ratestate.map
